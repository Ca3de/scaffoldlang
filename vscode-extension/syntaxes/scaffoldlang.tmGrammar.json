{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "ScaffoldLang",
  "scopeName": "source.scaffold",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#macros"
    },
    {
      "include": "#micros"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.scaffold",
          "begin": "//",
          "end": "\\n",
          "patterns": [
            {
              "name": "markup.bold.comment.scaffold",
              "match": "\\b(TODO|FIXME|NOTE|BUG|HACK)\\b"
            }
          ]
        },
        {
          "name": "comment.block.scaffold",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "name": "markup.bold.comment.scaffold",
              "match": "\\b(TODO|FIXME|NOTE|BUG|HACK)\\b"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.scaffold",
          "match": "\\b(if|else|elif|while|for|in|range|return|break|continue|try|catch|finally|throw|switch|case|default)\\b"
        },
        {
          "name": "keyword.declaration.scaffold",
          "match": "\\b(app|fun|let|const|class|constructor|public|private|protected|static|abstract|interface|enum|namespace|macro|micro|import|from|as|export)\\b"
        },
        {
          "name": "keyword.operator.scaffold",
          "match": "\\b(and|or|not|is|in|instanceof|typeof|new|delete|await|async)\\b"
        },
        {
          "name": "constant.language.scaffold",
          "match": "\\b(true|false|null|undefined|this|super)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.scaffold",
          "match": "\\b(void|str|int|float|bool|String|Number|Boolean|Array|Object|Function|Matrix|Vector|Coordinate)\\b"
        },
        {
          "name": "storage.type.custom.scaffold",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.scaffold",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.scaffold",
              "match": "\\\\(n|t|r|\\\\|\"|'|u\\{[0-9a-fA-F]+\\})"
            },
            {
              "name": "invalid.illegal.unrecognized-string-escape.scaffold",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.scaffold",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.scaffold",
              "match": "\\\\(n|t|r|\\\\|\"|')"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.scaffold",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.integer.decimal.scaffold",
          "match": "\\b\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.scaffold",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.integer.binary.scaffold",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.integer.octal.scaffold",
          "match": "\\b0o[0-7]+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.scaffold",
          "match": "[+\\-*/%]"
        },
        {
          "name": "keyword.operator.comparison.scaffold",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.scaffold",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.assignment.scaffold",
          "match": "(=|\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.arrow.scaffold",
          "match": "->"
        },
        {
          "name": "punctuation.delimiter.scaffold",
          "match": "[,;:.]"
        },
        {
          "name": "punctuation.bracket.scaffold",
          "match": "[()\\[\\]{}]"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.definition.scaffold",
          "match": "\\b(fun)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "keyword.declaration.scaffold"
            },
            "2": {
              "name": "entity.name.function.scaffold"
            }
          }
        },
        {
          "name": "entity.name.function.call.scaffold",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "entity.name.function.scaffold"
            }
          }
        },
        {
          "name": "support.function.builtin.scaffold",
          "match": "\\b(print|println|input|len|typeof|toString|parseInt|parseFloat)\\b"
        },
        {
          "name": "support.function.math.scaffold",
          "match": "\\b(sin|cos|tan|asin|acos|atan|sinh|cosh|tanh|exp|log|log10|sqrt|cbrt|pow|abs|floor|ceil|round|min|max|clamp|gcd|lcm|factorial|fibonacci)\\b"
        },
        {
          "name": "support.function.array.scaffold",
          "match": "\\b(push|pop|shift|unshift|slice|splice|indexOf|includes|map|filter|reduce|sort|reverse|join|concat|bubbleSort|quickSort|mergeSort)\\b"
        },
        {
          "name": "support.function.matrix.scaffold",
          "match": "\\b(matrixAdd|matrixMultiply|matrixTranspose|matrixDeterminant|matrixInverse|matrixIdentity|matrixZeros|matrixOnes)\\b"
        },
        {
          "name": "support.function.coordinate.scaffold",
          "match": "\\b(cartesianToPolar|polarToCartesian|cartesianToSpherical|sphericalToCartesian|rotatePoint|translatePoint|scalePoint|eulerToMatrix|matrixToEuler)\\b"
        }
      ]
    },
    "macros": {
      "patterns": [
        {
          "name": "storage.type.macro.scaffold",
          "match": "\\bmacro\\s+(\\w+)",
          "captures": {
            "1": {"name": "entity.name.function.macro.scaffold"}
          }
        },
        {
          "name": "variable.parameter.macro.scaffold",
          "match": "\\{(\\w+)\\}",
          "captures": {
            "1": {"name": "variable.parameter.scaffold"}
          }
        }
      ]
    },
    "micros": {
      "patterns": [
        {
          "name": "storage.type.micro.scaffold",
          "match": "\\bmicro\\s+(\\w+)",
          "captures": {
            "1": {"name": "entity.name.function.micro.scaffold"}
          }
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.scaffold",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
} 